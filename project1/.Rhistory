get.objective(TSP)
x=get.variables(TSP)
x
a = matrix(c(3,2,6,5), 2, 2)
b = matrix(c(3, 2), 2, 1)
solve(a, b)
a = matrix(c(1,2,-2,3), 2, 2)
b = matrix(c(1, 2), 2, 1)
solve(a, b)
a = matrix(c(1, 1, 1, -1, 0, -1, 0, 1, -2), 3, 3)
a
b = matrix(c(3, 6, 0), 3, 1)
b
solve(a, b)
a = matrix(c(1,2, 4, 1, 1, 3, 1, 0, 3), 3, 3)
b = matrix(c(1, 3, 4), 3, 1)
solve(a, b)
a = matrix(c(1, .45, -.25, .14, 1, -.55, .75, .20, 1, 0, -.25, .2, 1, 0, -.25, .1), 4, 4)
a
b = matrix(c(250, 0, 0, 37.5), 4, 1)
b
solve(a, b)
library(lpSolve)
c <- c(2000, 3000)
A <- matrix(c(3, 2, 1, 2, 4, 1), 3, 2)
A
c <- c(2000, 3000)
A <- matrix(c(3, 2, 1, 2, 4, 1), 3, 2)
dir <- c("<=", "<=", "<=")
s <- lp("max", c, A, dir, b, compute.sens=1)
b <- c(1000, 1200, 450)
s$solution
s$objval
s$duals
s$duals.to
s$duals.from
c <- c(13, 16, 16, 14, 39)
A <- matrix(c(11, 3, 1, 0, 0, 0, 0, 53, 6, 0, 1, 0, 0, 0, 5, 5, 0, 0, 1, 0, 0, 5, 1, 0, 0, 0, 1, 0, 29, 34, 0, 0, 0, 0, 1), 7, 5)
dir <- rep("<=", 7)
b <- c(40, 20, 1, 1, 1, 1, 1)
s <- lp("max", c, A, dir, b, all.int=FALSE)
s$solution
s$objval
c <- c(.18, .23, .05)
A <- matrix(c(72, 72, 107, 107, 1, 0, 0, 121, 121, 500, 500, 0, 1, 0, 65, 65, 0, 0, 0, 0, 1), 7, 3)
dir <- c(">=", "<=", ">=", "<=", "<=", "<=", "<=")
b <- c(2000, 2250, 5000, 50000, 10, 10, 10)
s <- lp("min", c, A, dir, b)
s$solution
s$objval
c <- c(30, 100, 30, 80)
A <- matrix(c(40, 20, 40, 5, 30, 2, 30, 4), 2, 4)
dir <- c("<=", "<=")
b <- c(40000, 6000)
s <- lp("max", c, A, dir, b, compute.sens=1)
s$solution
s$objval
s$duals
func <- function(L){
K = (100000 - 12*L)/15
num_machines = 0.05*L^(2/3)*K^(1/3)
return(-num_machines)
}
S=optim(2000, func, method="BFGS")
S
library(quadprog)
?optim
stocks <- read.csv("homework4stocks.csv")
setwd("C:/Users/Julia Wu/Desktop/Stochastic Control & Optimization/Homework")
stocks <- read.csv("homework4stocks.csv")
head(stocks)
mean_return = colMeans(stocks[,2:ncol(stocks)])
mean_return
var = apply(stocks[,2:ncol(stocks)], 2, var)
var
s = sqrt(var)
corr = cor(stocks[,2:ncol(stocks)], use="pairwise.complete.obs")
corr
covMat = diag(s) %*% corr %*% diag(s)
Dmat = 2*covMat
dvec = rep(0,27)
Amat = matrix(c(rep(1,27),rep(-1,27),mean_return),27)
bvec = c(1,-1,0.01)
S=solve.QP(Dmat,dvec,Amat,bvec)
S
sum(S$solution * mean_return)
sum(S$solution * var)
sum(S$solution * sqrt(var))
?solve.QP
nfl <- read.csv('nflratings.csv')
head(nfl)
nfl <- read.csv('nflratings.csv', header=FALSE)
head(nfl)
nfl <- read.csv('nflratings.csv')
head(nfl)
nfl$actual_point_spread = nfl$X13 - nfl$X10
func <- function(R){
pred_error = 0
for (i in 1:nrow(nfl)) {
pred_error = pred_error + (nfl$actual_point_spread[i] - (R[nfl[i,2]] - R[nfl[i,3]] + R[33]))^2
}
return(pred_error)
}
S=optim(rep(0, 33), func, method="BFGS")
nfl <- read.csv('nflratings.csv', header=FALSE)
head(nfl)
nfl$actual_point_spread = nfl$V4 - nfl$V5
func <- function(R){
pred_error = 0
for (i in 1:nrow(nfl)) {
pred_error = pred_error + (nfl$actual_point_spread[i] - (R[nfl[i,2]] - R[nfl[i,3]] + R[33]))^2
}
return(pred_error)
}
S=optim(rep(0, 33), func, method="BFGS")
sol = S$par[1:32] + (85 - mean(S$par[1:32]))
sol = c(sol, S$par[33])
mean(sol[1:32])
sol
p_win = seq(0, 1, 0.05)
p_win_before_7 = c()
sim = rbinom(100000,6,i)
sim = rbinom(100000,6,1)
sim
?binom
?rbinom
sim = rbinom(100000,6,i)
p_win_before_7 = c(p_win_before_7, mean(sim >= 4 | sim <= 2))
p_win = seq(0, 1, 0.05)
p_win_before_7 = c()
rbinom(100,6,0.4)
seq(0, 1, 0.05)
rbinom(10,6,0.5)
rbinom(3,5,1)
rbinom(3,5,.5)
rbinom(3,5,.3)
p_win = seq(0, 1, 0.05)
p_win_before_7 = c()
for (i in p_win) {
sim = rbinom(100000,6,i)
p_win_before_7 = c(p_win_before_7, mean(sim >= 4 | sim <= 2))
}
p_win_before_7 = c()
plot(p_win, p_win_before_7, type="l", xlab="P(team A winning each game)", ylab="P(series decided before 7th game")
p_win
p_win
p_win_before_7
p_win_before_7 = c()
for (i in p_win) {
sim = rbinom(100000,6,i)
p_win_before_7 = c(p_win_before_7, mean(sim >= 4 | sim <= 2))
}
p_win_before_7
plot(p_win, p_win_before_7, type="l", xlab="P(team A winning each game)", ylab="P(series decided before 7th game")
n = seq(40, 50, 1)
n
p = c()
rbinom(100000,i,0.9)
i=40
rbinom(100000,i,0.9)
for (i in n) {
num_show = mean(rbinom(100000,i,0.9))
revenue = num_show * 10
num_over = num_show - 40
if (num_over > 0) {
cost = num_over * 25
profit = revenue - cost
} else {
profit = revenue
}
p = c(p,profit)
}
plot(n, p, type="l", xlab="# of seats sold", ylab="Profit")
n[which.max(p)]
library(triangle)
library(lpSolveAPI)
time = c()
num_k = 0
num_l = 0
rltriangle(a=8, b=16, c=9)
runif(9)
cost=matrix(c(0,50,20,50,0,70,20,70,0),3,3)
cost=matrix(c(0,50,20,50,0,70,20,70,0),3,3)
cost
sales = c(120,160,170)
tValues = seq(1,T)
sN = nrow(cost)
tN = length(tValues)
V = matrix(NA,sN,tN)
U = matrix(NA,sN,tN)
for (ti in seq(tN,1,-1)){
for (si in 1:sN){
if(ti==tN){
V[si,ti] = sales[1] - cost[si,1]
U[si,ti] = 1
}
else{
I = sales[1] - cost[1,si] + V[1,ti+1]
B = sales[2] - cost[2,si] + V[2,ti+1]
C = sales[3] - cost[3,si] + V[3,ti+1]
V[si,ti] = max(I,B,C)
U[si,ti] = which.max(c(I,B,C))
}
} #for si
} #for ti
V
cost
T=3
sValues = seq(0,800,100)
tValues = seq(1,T)
sN=length(sValues)
tN=length(tValues)
V=matrix(NA,sN,tN)
U=matrix(NA,sN,tN)
seq(tN,1,-1)
ti=3
si=1
if(ti==tN){
if(si==1){
V[si,ti]=(300-sValues[si])*120+2500
U[si,ti]=300-sValues[si]
}
}
si=2
demand=300
T = 4
sales = c(120,160,170)
cost=matrix(c(0,50,20,50,0,70,20,70,0),3,3)
tValues = seq(1,T)
sN = nrow(cost)
tN = length(tValues)
V = matrix(NA,sN,tN)
U = matrix(NA,sN,tN)
ti=3
seq(tN,1,-1)
ti=4
sN
si=1
if(ti==tN){
V[si,ti] = sales[1] - cost[si,1]
U[si,ti] = 1
}
V
for (si in 1:sN){
if(ti==tN){
V[si,ti] = sales[1] - cost[si,1]
U[si,ti] = 1
}
}
V
ti=3
si=1
cost[1,si]
V[1,ti+1]
I = sales[1] - cost[1,si] + V[1,ti+1]
I
sales[2]
cost[2,si]
V[2,ti+1]
B = sales[2] - cost[2,si] + V[2,ti+1]
C = sales[3] - cost[3,si] + V[3,ti+1]
B
C
100*.7
M=6
T=3
sValues = seq(0,M)
tValues = seq(1,T)
sN=length(sValues)
tN=length(tValues)
V=matrix(NA,sN,tN)
U=matrix(NA,sN,tN)
seq(tN,1,-1)
ti=3
for (si in (1:(M+1))){
if(ti==tN){
if(si==1){
V[si,ti]=0
U[si,ti]=0
}
else{
V[si,ti]=4*(si-1)+5
U[si,ti]=si-1
}
}
}
V
library(quadprog)
func <- function(L){
K = (100000 - 12*L)/15
num_machines = 0.05*L^(2/3)*K^(1/3)
return(-num_machines)
}
S = optim(2000, func, method="BFGS")
S
setwd("C:/Users/Julia Wu/Desktop/Stochastic Control & Optimization/mis381n-stochastic-control-and-optimization/hw4")
nfl <- read.csv('nflratings.csv')
head(nfl)
nfl$actual_point_spread = nfl$X13 - nfl$X10
func <- function(R){
pred_error = 0
for (i in 1:nrow(nfl)) {
pred_error = pred_error + (nfl$actual_point_spread[i] - (R[nfl[i,2]] - R[nfl[i,3]] + R[33]))^2
}
return(pred_error)
}
S=optim(rep(0, 33), func, method="BFGS")
sol = S$par[1:32] + (85 - mean(S$par[1:32]))
sol = c(sol, S$par[33])
mean(sol[1:32])
sol
library(lpSolveAPI)
library(lpSolveAPI)
lps.model <- make.lp(0, 17)
for (x in (1:6)) {
xt <- rep(0,17)
xt[x] <- 1
add.constraint(lps.model, xt, "<=", 200)
}
for (y in (7:12)) {
xt <- rep(0,17)
xt[y] <- 1
add.constraint(lps.model, xt, "<=", 100)
}
demand = c(200,260,240,340,190,150)
for (i in (1:6)) {
xt <- rep(0,17)
xt[i] <- 1
xt[i+6] <- 1
if (i > 1) {
xt[i+11] <- 1
}
add.constraint(lps.model, xt, ">=", demand[i])
}
for (i in (1:6)) {
xt <- rep(0,17)
xt[i] <- 1
xt[i+6] <- 1
if (i < 6) {
xt[i+12] <- -1
}
if (i > 1) {
xt[i+11] <- 1
}
add.constraint(lps.model, xt, "=", demand[i])
}
set.objfn(lps.model, c(rep(7,6),rep(11,6),rep(1,5)))
solve(lps.model)
get.variables(lps.model)
get.objective(lps.model)
lps.model <- make.lp(0, 6)
add.constraint(lps.model, c(1,0,1,0,1,0), "<=", 100000)
add.constraint(lps.model, c(0,1,0,1,0,1), "<=", 100000)
add.constraint(lps.model, c(1,1,0,0,0,0), "<=", 80000)
add.constraint(lps.model, c(0,0,1,1,0,0), "<=", 80000)
add.constraint(lps.model, c(0,0,1,1,0,0), "<=", 80000)
set.objfn(lps.model, c(1100,1900,900,2200,1000,2000))
lp.control(lps.model,sense='max')
solve(lps.model)
get.variables(lps.model)
get.objective(lps.model)
lps.model <- make.lp(0, 6)
add.constraint(lps.model, c(1,0,1,0,1,0), "<=", 100000)
add.constraint(lps.model, c(0,1,0,1,0,1), "<=", 100000)
add.constraint(lps.model, c(1,0,0,0,0,0), "<=", 40000)
add.constraint(lps.model, c(0,1,0,0,0,0), "<=", 40000)
add.constraint(lps.model, c(0,0,1,0,0,0), "<=", 40000)
add.constraint(lps.model, c(0,0,0,1,0,0), "<=", 40000)
add.constraint(lps.model, c(0,0,0,0,1,0), "<=", 40000)
add.constraint(lps.model, c(0,0,0,0,0,1), "<=", 40000)
set.objfn(lps.model, c(1100,1900,900,2200,1000,2000))
lp.control(lps.model,sense='max')
solve(lps.model)
get.variables(lps.model)
get.objective(lps.model)
##3
lps.model <- make.lp(0, 6)
add.constraint(lps.model, c(1,0,1,0,1,0), "<=", 100000)
add.constraint(lps.model, c(0,1,0,1,0,1), "<=", 100000)
add.constraint(lps.model, c(1,1,0,0,0,0), "<=", 80000)
add.constraint(lps.model, c(0,0,1,1,0,0), "<=", 80000)
add.constraint(lps.model, c(0,0,1,1,0,0), "<=", 80000)
set.objfn(lps.model, c(1100,1900,900,2200,1000,2000))
lp.control(lps.model,sense='max')
solve(lps.model)
get.variables(lps.model)
get.objective(lps.model)
3.24*100000000
lps.model <- make.lp(0, 16)
for (i in seq(1, 16, by=4)) {
xt <- rep(0,16)
xt[i:(i+3)] <- 1
print(xt)
add.constraint(lps.model, xt, "=", 1)
}
for (i in (1:4)) {
xt <- rep(0,16)
xt[i] <- 1
xt[i+4] <- 1
xt[i+8] <- 1
xt[i+12] <- 1
print(xt)
add.constraint(lps.model, xt, "=", 1)
}
set.objfn(lps.model, c(54,54,51,53,51,57,52,52,50,53,54,56,56,54,55,53))
solve(lps.model)
get.variables(lps.model)
get.objective(lps.model)
p_win = seq(0, 1, 0.05)
p_win_before_7 = c()
for (i in p_win) {
sim = rbinom(100000,6,i)
p_win_before_7 = c(p_win_before_7, mean(sim >= 4 | sim <= 2))
}
p_win_before_7 = c()
p_win_before_7
p_win = seq(0, 1, 0.05)
p_win_before_7 = c()
for (i in p_win) {
sim = rbinom(100000,6,i)
p_win_before_7 = c(p_win_before_7, mean(sim >= 4 | sim <= 2))
}
p_win_before_7
n = seq(40, 50, 1)
p = c()
for (i in n) {
num_show = mean(rbinom(100000,i,0.9))
revenue = num_show * 10
num_over = num_show - 40
if (num_over > 0) {
cost = num_over * 25
profit = revenue - cost
} else {
profit = revenue
}
p = c(p,profit)
}
plot(n, p, type="l", xlab="# of seats sold", ylab="Profit")
n[which.max(p)]
max(p)
num_k/10000
num_l/10000
library(triangle)
library(lpSolveAPI)
time = c()
num_k = 0
num_l = 0
for (i in (1:10000)) {
l=matrix(0,16,16)
l[1,2]=rltriangle(a=8, b=16, c=9) #A
l[2,3]=l[2,4]=rltriangle(a=4, b=12, c=5) #B
l[3,5]=l[3,7]=rltriangle(a=5, b=7, c=6) #C
l[4,6]=l[4,7]=rltriangle(a=4, b=16, c=13) #D
l[5,6]=rltriangle(a=3, b=5, c=4) #E
l[6,8]=l[6,9]=rltriangle(a=2, b=4, c=3) #F
l[7,10]=rltriangle(a=4, b=8, c=6) #G
l[8,12]=rltriangle(a=10, b=18, c=11) #H
l[9,11]=rltriangle(a=3, b=3, c=3) #I
l[10,13]=rltriangle(a=12, b=16, c=14) #J
l[11,12]=rltriangle(a=3, b=5, c=4) #K
l[12,14]=l[12,13]=rltriangle(a=2, b=4, c=3) #L
l[13,15]=rltriangle(a=8, b=8, c=8) #M
l[14,15]=rltriangle(a=6, b=22, c=11) #N
l[15,16]=rltriangle(a=3, b=6, c=4) #O
lanProj<-make.lp(0,16*16)
#set objective coefficients
set.objfn(lanProj, as.vector(t(l)))
#set objective direction
lp.control(lanProj,sense='max')
nodes=c(1:16)
rhs=c(1,rep(0,14),-1)
for (n in 1:16){
coef=c(l[n,1:16]/l[n,1:16],-l[1:16,n]/l[1:16,n])
ind=c((n-1)*16+c(1:16),(c(1:16)-1)*16+n)
nz=is.finite(coef)
add.constraint(lanProj,coef[nz], "=",rhs[n],ind[nz])
}
ColNames = c()
RowNames = c()
for(i in 1:16){
for(j in 1:16){
ColNames = cbind(ColNames,paste("x",i,",",j, sep=""))
}
RowNames=cbind(RowNames,paste("node",i))
}
dimnames(lanProj) <- list(RowNames, ColNames)
set.type(lanProj, c(1:256), "binary")
#write to text file
write.lp(lanProj,'lanProj.lp',type='lp')
#solve the model, if this return 0 an optimal solution is found
status=solve(lanProj)
#this return the proposed solution
time = c(time, get.objective(lanProj))
x=get.variables(lanProj)
if (sum(matrix(x,16,16)[,11]) > 0) {
num_k = num_k + 1
}
if (sum(matrix(x,16,16)[,12]) > 0) {
num_l = num_l + 1
}
}
mean(time)
num_k/10000
num_l/10000
cost = matrix(0,10,10)
cost[1,4]  =  cost[2,4] = cost[3,7] = cost[4,8] = cost[5,7] = cost[5,8] = cost[8,10] = 2
cost[1,3] = cost[3,6] = cost[6,10] = cost[9,10] = 3
cost[2,3] = cost[2,5] = cost[4,6] = cost[7,10] = 4
cost[4,9] = 5
T = 10
tValues = seq(1,T)
setwd("C:/Users/Julia Wu/Desktop/Stochastic Control & Optimization/mis381n-stochastic-control-and-optimization/cash-flow-matching-with-linear-programming")

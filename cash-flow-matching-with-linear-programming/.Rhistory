?lp
?lpsolve
lpSolve::
?lpSolve
??lpSolve
c <- c(4, 5)
c
A <- matrix(c(2, 3), 2, 1)
A
s <- lp("max", c, A, dir, b)
library(lpSolve)
s <- lp("max", c, A, dir, b)
b <- c(60)
s <- lp("max", c, A, dir, b)
dir <- c("<=")
b <- c(60)
s <- lp("max", c, A, dir, b)
s
s$solution
s$objval
?lp
c <- c(4, 5)
A <- matrix(c(2, 3), 1, 2)
dir <- c("<=")
b <- c(60)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
A <- matrix(c(2, 1, 3, -1), 2, 2)
A
A <- matrix(c(2, 1, 3, -1), 2, 2)
dir <- c("<=", ">=")
b <- c(60, 0)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
A <- matrix(c(2, 1, 3, -1), 2, 2)
A
dir <- c("<=", ">=")
dir
b
s <- lp("max", c, A, dir, b)
s$solution
A <- matrix(c(2, -1, 3, 1), 2, 2)
dir <- c("<=", ">=")
b <- c(60, 0)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
c <- c(4, 5)
A <- matrix(c(2, 3), 1, 2)
dir <- c("<=")
b <- c(60)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
c <- c(4, 5)
A1 <- matrix(c(2, 3), 1, 2)
dir1 <- c("<=")
b1 <- c(60)
s1 <- lp("max", c, A, dir, b)
s1$solution
s1$objval
s2 <- lp("max", c, A2, dir2, b2)
A2 <- matrix(c(2, -1, 3, 1), 2, 2)
dir2 <- c("<=", ">=")
b2 <- c(60, 0)
s2 <- lp("max", c, A2, dir2, b2)
s2$objval
s1$objval - s2$objval
c <- c(2000, 3000)
A1 <- matrix(c(3, 2, 2, 4), 2, 2)
A1
c <- c(2000, 3000)
A1 <- matrix(c(3, 2, 2, 4), 2, 2)
dir1 <- c("<=", "<=")
b1 <- c(1000, 1200)
s1 <- lp("max", c, A, dir, b)
s1$solution
s1$objval
A1
c <- c(2000, 3000)
A1 <- matrix(c(3, 2, 2, 4), 2, 2)
A1
c <- c(2000, 3000)
A1 <- matrix(c(3, 2, 2, 4), 2, 2)
dir1 <- c("<=", "<=")
b1 <- c(1000, 1200)
s1 <- lp("max", c, A, dir, b)
c <- c(2000, 3000)
A <- matrix(c(3, 2, 2, 4), 2, 2)
dir <- c("<=", "<=")
b <- c(1000, 1200)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
f <- seq(200, 2200, 100)
f
f <- seq(200, 2200, 100)
for(i in f)
{
b <- c(1000, i)
s <- lp("max", c, A, dir, b)
print(s$solution)
}
f <- seq(200, 2200, 100)
for(i in f)
{
b <- c(1000, i)
s <- lp("max", c, A, dir, b)
print(i)
print(s$solution)
}
df <- data.frame()
df
f <- seq(200, 2200, 100)
df <- data.frame()
for(i in f)
{
b <- c(1000, i)
s <- lp("max", c, A, dir, b)
df <- rbind(df, c(i, s$solution))
}
print df
df
df <- data.frame(dimnames=c("fertilizer", "wheat", "corn"))
for(i in f)
{
b <- c(1000, i)
s <- lp("max", c, A, dir, b)
df <- rbind(df, c(i, s$solution))
}
df
df <- data.frame("fertilizer", "wheat", "corn")
df
for(i in f)
{
b <- c(1000, i)
s <- lp("max", c, A, dir, b)
df <- rbind(df, c(i, s$solution))
}
df
df <- data.frame(fertilizer, wheat, corn)
df
df <- data.frame(fertilizer=numeric(0), wheat=numeric(0), corn=numeric(0))
df
for(i in f)
{
b <- c(1000, i)
s <- lp("max", c, A, dir, b)
df <- rbind(df, c(i, s$solution))
}
df
df <- data.frame(fertilizer=numeric(0), wheat=numeric(0), corn=numeric(0))
df <- data.frame(fertilizer=numeric(0), wheat=numeric(0), corn=numeric(0))
df
b <- c(1000, 200)
s <- lp("max", c, A, dir, b)
df <- rbind(df, c(i, s$solution))
df
b <- c(1000, 200)
s <- lp("max", c, A, dir, b)
df <- rbind(df, data.frame(fertilizer=i, wheat=s$solution[0], corn=s$solution[1]))
s$solution[0]
s$solution[1]
b <- c(1000, 200)
s <- lp("max", c, A, dir, b)
df <- rbind(df, data.frame(fertilizer=i, wheat=s$solution[2], corn=s$solution[2]))
df <- data.frame(fertilizer=numeric(0), wheat=numeric(0), corn=numeric(0))
df
b <- c(1000, 200)
s <- lp("max", c, A, dir, b)
df <- rbind(df, data.frame(fertilizer=i, wheat=s$solution[2], corn=s$solution[2]))
df
s$solution
f <- seq(200, 2200, 100)
df <- data.frame(fertilizer=numeric(0), wheat=numeric(0), corn=numeric(0))
for(i in f)
{
b <- c(1000, i)
s <- lp("max", c, A, dir, b)
df <- rbind(df, data.frame(fertilizer=i, wheat=s$solution[1], corn=s$solution[2]))
}
df
s$duals
c <- c(2000, 3000)
A <- matrix(c(3, 2, 2, 4), 2, 2)
dir <- c("<=", "<=")
b <- c(1000, 1200)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
s$duals
A <- matrix(c(11, 3, 53, 6, 5, 5, 5, 1, 29, 34), 2, 5)
A
b <- c(40, 20)
c <- c(13, 16, 16, 14, 39)
A <- matrix(c(11, 3, 53, 6, 5, 5, 5, 1, 29, 34), 2, 5)
dir <- c("<=", "<=")
b <- c(40, 20)
s <- lp("max", c, A, dir, b)
s$solution
s <- lp("max", c, A, dir, b, all.int=FALSE)
s$solution
s$objval
A <- matrix(c(72, 72, 107, 107, 1, 0, 0, 121, 121, 500, 500, 0, 1, 0, 65, 65, 0, 0, 0, 0, 1), 7, 3)
A
dir <- c(">=", "<=", ">=", "<=", "<=", "<=", "<=")
dir
b <- c(2000, 2250, 5000, 50000, 10, 10, 10)
s <- lp("min", c, A, dir, b)
s$solution
c <- c(.18, .23, .05)
A <- matrix(c(72, 72, 107, 107, 1, 0, 0, 121, 121, 500, 500, 0, 1, 0, 65, 65, 0, 0, 0, 0, 1), 7, 3)
dir <- c(">=", "<=", ">=", "<=", "<=", "<=", "<=")
b <- c(2000, 2250, 5000, 50000, 10, 10, 10)
s <- lp("min", c, A, dir, b)
s$solution
s$objval
c <- c(30, 100, 30, 80)
A <- matrix(c(40, 40, 30, 30, 2, 5, 2, 5), 2, 4)
c <- c(30, 100, 30, 80)
A <- matrix(c(40, 40, 30, 30, 2, 5, 2, 5), 2, 4)
dir <- c("<=", "<=")
b <- c(40000, 6000)
s <- lp("max", c, A, dir, b)
s$solution
s$solution
s$objval
A <- matrix(c(40, 40, 30, 30, 2, 5, 2, 4), 2, 4)
dir <- c("<=", "<=")
b <- c(40000, 6000)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
c <- c(30, 100, 30, 80)
A <- matrix(c(40, 40, 30, 30, 2, 5, 2, 4), 2, 4)
dir <- c("<=", "<=")
b <- c(40000, 6000)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
A
A <- matrix(c(40, 20, 40, 5, 30, 2, 30, 4), 2, 4)
A
dir <- c("<=", "<=")
b <- c(40000, 6000)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
s$duals
s <- lp("max", c, A, dir, b, compute.sens=1)
s$duals
c <- c(4, 5)
A1 <- matrix(c(2, 3), 1, 2)
dir1 <- c("<=")
b1 <- c(60)
s1 <- lp("max", c, A1, dir1, b1)
s1$solution
s1$objval
A2 <- matrix(c(2, -1, 3, 1), 2, 2)
dir2 <- c("<=", ">=")
b2 <- c(60, 0)
s2 <- lp("max", c, A2, dir2, b2)
s2$solution
s2$objval
c <- c(2000, 3000)
A <- matrix(c(3, 2, 2, 4), 2, 2)
dir <- c("<=", "<=")
b <- c(1000, 1200)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
clear
c <- c(2000, 3000)
A <- matrix(c(3, 2, 2, 4), 2, 2)
dir <- c("<=", "<=")
b <- c(1000, 1200)
s <- lp("max", c, A, dir, b)
s$solution
s$objval
f <- seq(200, 2200, 100)
df <- data.frame(fertilizer=numeric(0), wheat=numeric(0), corn=numeric(0))
for(i in f)
{
b <- c(1000, i)
s <- lp("max", c, A, dir, b)
df <- rbind(df, data.frame(fertilizer=i, wheat=s$solution[1], corn=s$solution[2]))
}
df
c <- c(13, 16, 16, 14, 39)
A <- matrix(c(11, 3, 53, 6, 5, 5, 5, 1, 29, 34), 2, 5)
dir <- c("<=", "<=")
b <- c(40, 20)
s <- lp("max", c, A, dir, b, all.int=FALSE)
s$solution
s$objval
c <- c(.18, .23, .05)
A <- matrix(c(72, 72, 107, 107, 1, 0, 0, 121, 121, 500, 500, 0, 1, 0, 65, 65, 0, 0, 0, 0, 1), 7, 3)
dir <- c(">=", "<=", ">=", "<=", "<=", "<=", "<=")
b <- c(2000, 2250, 5000, 50000, 10, 10, 10)
s <- lp("min", c, A, dir, b)
s$solution
s$objval
c <- c(30, 100, 30, 80)
A <- matrix(c(40, 20, 40, 5, 30, 2, 30, 4), 2, 4)
dir <- c("<=", "<=")
b <- c(40000, 6000)
s <- lp("max", c, A, dir, b, compute.sens=1)
s$solution
s$objval
A <- matrix(c(11, 3, 1, 0, 0, 0, 0, 53, 6, 0, 1, 0, 0, 0, 5, 5, 0, 0, 1, 0, 0, 5, 1, 0, 0, 0, 1, 0, 29, 34, 0, 0, 0, 0, 1), 2, 5)
A <- matrix(c(11, 3, 1, 0, 0, 0, 0, 53, 6, 0, 1, 0, 0, 0, 5, 5, 0, 0, 1, 0, 0, 5, 1, 0, 0, 0, 1, 0, 29, 34, 0, 0, 0, 0, 1), 7, 5)
A
dir <- rep("<=", 7)
dir
b <- c(40, 20, 1, 1, 1, 1, 1)
b
c <- c(13, 16, 16, 14, 39)
A <- matrix(c(11, 3, 1, 0, 0, 0, 0, 53, 6, 0, 1, 0, 0, 0, 5, 5, 0, 0, 1, 0, 0, 5, 1, 0, 0, 0, 1, 0, 29, 34, 0, 0, 0, 0, 1), 7, 5)
dir <- rep("<=", 7)
b <- c(40, 20, 1, 1, 1, 1, 1)
s <- lp("max", c, A, dir, b, all.int=FALSE)
library(lpSolve)
s <- lp("max", c, A, dir, b, all.int=FALSE)
s$solution
s$objval
c <- c(13, 16, 16, 14, 39)
A <- matrix(c(11, 3, 1, 0, 0, 0, 0, 53, 6, 0, 1, 0, 0, 0, 5, 5, 0, 0, 1, 0, 0, 5, 1, 0, 0, 0, 1, 0, 29, 34, 0, 0, 0, 0, 1), 7, 5)
dir <- rep("<=", 7)
b <- c(40, 20, 1, 1, 1, 1, 1)
s <- lp("max", c, A, dir, b, all.int=FALSE)
s$solution
s$objval
A
?lp
library(lpSolve)
s <- lp("max", c, A, dir, b, compute.sens=1)
c <- c(2000, 3000)
A <- matrix(c(3, 2, 2, 4), 2, 2)
dir <- c("<=", "<=")
b <- c(1000, 1200)
s <- lp("max", c, A, dir, b, compute.sens=1)
s$solution
s$objval
s$duals
s$duals.to
s$duals.from
c <- c(2000, 3000)
A <- matrix(c(3, 2, 1, 2, 4, 1), 3, 2)
dir <- c("<=", "<=")
b <- c(1000, 1200, 450)
s <- lp("max", c, A, dir, b, compute.sens=1)
c <- c(2000, 3000)
A <- matrix(c(3, 2, 1, 2, 4, 1), 3, 2)
dir <- c("<=", "<=", "<=")
b <- c(1000, 1200, 450)
s <- lp("max", c, A, dir, b, compute.sens=1)
s$solution
s$objval
f <- seq(200, 2200, 100)
df <- data.frame(fertilizer=numeric(0), wheat=numeric(0), corn=numeric(0))
for(i in f)
{
b <- c(1000, i)
s <- lp("max", c, A, dir, b)
df <- rbind(df, data.frame(fertilizer=i, wheat=s$solution[1], corn=s$solution[2]))
}
warning()
warnings()
f <- seq(200, 2200, 100)
df <- data.frame(fertilizer=numeric(0), wheat=numeric(0), corn=numeric(0))
for(i in f)
{
b <- c(1000, i, 450)
s <- lp("max", c, A, dir, b)
df <- rbind(df, data.frame(fertilizer=i, wheat=s$solution[1], corn=s$solution[2]))
}
df
c <- c(2000, 3000)
A <- matrix(c(3, 2, 1, 2, 4, 1), 3, 2)
dir <- c("<=", "<=", "<=")
b <- c(1000, 1200, 450)
s <- lp("max", c, A, dir, b, compute.sens=1)
s$solution
s$objval
f <- seq(200, 2200, 100)
df <- data.frame(fertilizer=numeric(0), wheat=numeric(0), corn=numeric(0))
for(i in f)
{
b <- c(1000, i, 450)
s <- lp("max", c, A, dir, b)
df <- rbind(df, data.frame(fertilizer=i, wheat=s$solution[1], corn=s$solution[2]))
}
df
s$duals
c <- c(2000, 3000)
A <- matrix(c(3, 2, 1, 2, 4, 1), 3, 2)
dir <- c("<=", "<=", "<=")
b <- c(1000, 1200, 450)
s <- lp("max", c, A, dir, b, compute.sens=1)
s$solution
s$objval
s$duals
s$duals.to
s$duals.from
c <- c(30, 100, 30, 80)
A <- matrix(c(40, 20, 40, 5, 30, 2, 30, 4), 2, 4)
dir <- c("<=", "<=")
b <- c(40000, 6000)
s <- lp("max", c, A, dir, b, compute.sens=1)
s$solution
s$objval
s$duals
c <- c(30, 100, 30, 80)
A <- matrix(c(40, 20, 40, 5, 30, 2, 30, 4), 2, 4)
dir <- c("<=", "<=")
b <- c(40000, 6000)
s <- lp("max", c, A, dir, b, compute.sens=1)
s$solution
s$objval
s$duals
s$duals.from
s$duals.to
c <- c(30, 100, 30, 80)
A <- matrix(c(40, 20, 40, 5, 30, 2, 30, 4), 2, 4)
dir <- c("<=", "<=")
b <- c(40000, 6000)
s <- lp("max", c, A, dir, b, compute.sens=1)
s$solution
s$objval
s$duals
install.packages("lpSolveAPI")
library(lpSolveAPI)
my.lp <- make.lp(8, 18)
my.lp
x <- make.lp(2,2)
y <- x
set.column(x, 1, c(1, 2))
set.column(x, 2, c(3, 4))
y
x <- make.lp(2,2)
set.column(x, 1, c(1, 2))
set.column(x, 2, c(3, 4))
y
x
x <- make.lp(2,2)
set.column(x, 1, c(1, 2))
set.column(x, 2, c(3, 4))
x
x <- make.lp(2,2)
set.column(x, 1, c(1, 2))
set.column(x, 2, c(3, 4))
x
bonds = read.csv('bonds.csv', header=TRUE) # csv containing all important bond fields from the provided website
setwd("C:/Users/Julia Wu/Desktop/Stochastic Control & Optimization/mis381n-stochastic-control-and-optimization/cash-flow-matching-with-linear-programming")
bonds = read.csv('bonds.csv', header=TRUE) # csv containing all important bond fields from the provided website
head(bonds)
bonds$Matur_Date = as.Date(as.character(bonds$Maturity),format="%m/%d/%Y")
bonds = bonds[bonds$Matur_Date <= as.Date('12/31/2021',format="%m/%d/%Y"),]
liability_dates = c('6/30/2016','12/31/2016','6/30/2017','12/31/2017','6/30/2018','12/31/2018','6/30/2019',
'12/31/2019','6/30/2020','12/31/2020','6/30/2021','12/31/2021')
liability_dates = as.Date(liability_dates,format="%m/%d/%Y")
dedicate_g1 = function (p,c,m,l) {
num.constraints = length(l) #set num of constraints to length of liabilities
num.bonds = length(c) #set num of bonds to length of coupons
my.lp = make.lp(num.constraints, num.bonds+num.constraints-1) #constraints, variables
check = matrix(0, num.constraints, num.bonds+num.constraints-1) #matrix to check that values are correctly inputted
z.mat = diag(-1, num.constraints, num.constraints-1) #initialize z mat and assign -1 to current year excess cash
z.mat[col(z.mat) == row(z.mat)-1] = 1 #assign 1 to previous year excess cash
z = 1
for(i in (num.bonds+1):(num.bonds+num.constraints-1)) { #loop to add z's to columns
set.column(my.lp, i, z.mat[,z])
check[,i] = z.mat[,z]
z = z + 1
}
for(bond in (1:num.bonds)){ #loop to add columns for x variables
maturity = m[bond] #set maturity to year the bond matures
col = rep(0, num.constraints) #assign all variables 0's
col[1:maturity] = c[bond] #assign coupons for all eligible years
col[maturity] = (100 + c[bond]) #assign 100 + coupon value at maturity
set.column(my.lp, bond, col) #set column
check[, bond] = col
}
set.objfn(my.lp, c(p, rep(0, num.constraints-1)))
set.constr.type(my.lp, rep("=", num.constraints))
set.rhs(my.lp, l)
return(my.lp)
}
new_port = dedicate_g1(p,c,m,l)
solve(new_port)
p = bonds$Asked #price
c = bonds$Coupon #coupon
l = c(9000000,9000000,10000000,10000000,6000000,6000000,9000000,9000000,10000000,10000000,5000000,3000000) #liabilities
new_port = dedicate_g1(p,c,m,l)
library(lpSolveAPI)
new_port = dedicate_g1(p,c,m,l)
m = 0
for (i in 1:length(bonds$Matur_Date)) {
for (j in 1:length(liability_dates)) {
if (bonds$Matur_Date[i] <= liability_dates[j]) {
m[i] = j
break
}
}
}
new_port = dedicate_g1(p,c,m,l)
solve(new_port)
get.variables(new_port)
typeof(get.variables(new_port))
length(liability_dates)
get.objective(new_port)
